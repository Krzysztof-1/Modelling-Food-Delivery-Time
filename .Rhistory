mutate(
Distance..km. = as.numeric(na_if(gsub("[^0-9\\.]", "", Distance..km.), "")),
TARGET = as.numeric(na_if(gsub("[^0-9\\.]", "", TARGET), "")),
# Convert categorical variables to factors
type_of_order_factor = factor(`Type_of_order`),
type_of_vehicle_factor = factor(`Type_of_vehicle`),
Traffic_Level_cleaned = str_trim(tolower(`Traffic_Level`)),
Traffic_Level_factor = factor(`Traffic_Level`),
weather_description_cleaned = str_trim(tolower(`weather_description`)),
weather_descriptions_factor = factor(case_when(
weather_description_cleaned %in% c("broken clouds", "clear sky", "few clouds", "overcast clouds", "scattered clouds") ~ "Clear",
weather_description_cleaned %in% c("fog", "haze", "smoke") ~ "Mild Weather",
weather_description_cleaned %in% c("mist", "moderate rain", "light rain") ~ "Rainy",
TRUE ~ NA_character_
), levels = c("Clear", "Mild weather", "Rainy"), ordered = TRUE),
Long_Delivery_Flag= if_else(TARGET >= 40, 1, 0),
speed = if_else(TARGET > 0, as.integer(Distance..km. *60/ TARGET), NA_real_)
) %>%
drop_na() %>%
filter(
Delivery_location_longitude >= 60, Restaurant_longitude >= 60,
Delivery_location_latitude >= 0, Restaurant_latitude >= 0
)
# Check structure after cleaning
str(df_clean)
# View summary to check for remaining NA values
summary(df_clean)
dim(df_clean)
#Load and inspect the dataset.
# Read the CSV file
getwd()
list.files()
library(tidyverse)
library(dplyr)
library(readr)
df <- read.csv("../data/Food_Time_Data_Set.csv")
dim(df)
head(df)
summary(df)
# data cleaning
# Count NA values in each column
colSums(is.na(df))
str(d.food_time)
head(d.food_time)
hist(d.food_time$TARGET)
plot(d.food_time$Distance..km.,d.food_time$TARGET)
abline()
summary(d.food_time)
# EDA before starting with linear model
hist(d.food_time$TARGET)
# EDA before starting with linear model
hist(d.food_time$TARGET)
# EDA before starting with linear model
hist(d.food_time$TARGET)
colSums$(is.na(d.food_time))
colSums(is.na(d.food_time))
#Load and inspect the dataset.
# Read the CSV file
getwd()
list.files()
library(tidyverse)
library(dplyr)
library(readr)
df <- read.csv(""C:/Users/Setup/OneDrive/02_Masterstudium/03_Module/02_Semester_2/03_ML1/group_work/Modelling-Food-Delivery-Time/data/Food_Time_Data_Set.csv")
df <- read.csv(C:/Users/Setup/OneDrive/02_Masterstudium/03_Module/02_Semester_2/03_ML1/group_work/Modelling-Food-Delivery-Time/data/Food_Time_Data_Set.csv")
df <- read.csv("C:/Users/Setup/OneDrive/02_Masterstudium/03_Module/02_Semester_2/03_ML1/group_work/Modelling-Food-Delivery-Time/data/Food_Time_Data_Set.csv")
dim(df)
head(df)
summary(df)
# data cleaning
# Count NA values in each column
colSums(is.na(df))
# Clean data: Remove NA values and filter valid coordinates
# Data Cleaning
df_clean <- df %>%
select(-X) %>%
mutate(
Distance..km. = as.numeric(na_if(gsub("[^0-9\\.]", "", Distance..km.), "")),
TARGET = as.numeric(na_if(gsub("[^0-9\\.]", "", TARGET), "")),
# Convert categorical variables to factors
type_of_order_factor = factor(`Type_of_order`),
type_of_vehicle_factor = factor(`Type_of_vehicle`),
Traffic_Level_cleaned = str_trim(tolower(`Traffic_Level`)),
Traffic_Level_factor = factor(`Traffic_Level`),
weather_description_cleaned = str_trim(tolower(`weather_description`)),
weather_descriptions_factor = factor(case_when(
weather_description_cleaned %in% c("broken clouds", "clear sky", "few clouds", "overcast clouds", "scattered clouds") ~ "Clear",
weather_description_cleaned %in% c("fog", "haze", "smoke") ~ "Mild Weather",
weather_description_cleaned %in% c("mist", "moderate rain", "light rain") ~ "Rainy",
TRUE ~ NA_character_
), levels = c("Clear", "Poor Visibility", "Rainy"), ordered = TRUE),
Long_Delivery_Flag= if_else(TARGET >= 40, 1, 0),
speed = if_else(TARGET > 0, as.integer(Distance..km. *60/ TARGET), NA_real_)
) %>%
drop_na() %>%
filter(
Delivery_location_longitude >= 60, Restaurant_longitude >= 60,
Delivery_location_latitude >= 0, Restaurant_latitude >= 0
)
# Clean data: Remove NA values and filter valid coordinates
# Data Cleaning
df_clean <- df %>%
select(-X) %>%
mutate(
Distance..km. = as.numeric(na_if(gsub("[^0-9\\.]", "", Distance..km.), "")),
TARGET = as.numeric(na_if(gsub("[^0-9\\.]", "", TARGET), "")),
# Convert categorical variables to factors
type_of_order_factor = factor(`Type_of_order`),
type_of_vehicle_factor = factor(`Type_of_vehicle`),
Traffic_Level_cleaned = str_trim(tolower(`Traffic_Level`)),
Traffic_Level_factor = factor(`Traffic_Level`),
weather_description_cleaned = str_trim(tolower(`weather_description`)),
weather_descriptions_factor = factor(case_when(
weather_description_cleaned %in% c("broken clouds", "clear sky", "few clouds", "overcast clouds", "scattered clouds") ~ "Clear",
weather_description_cleaned %in% c("fog", "haze", "smoke") ~ "Poor Visibility",
weather_description_cleaned %in% c("mist", "moderate rain", "light rain") ~ "Rainy",
TRUE ~ NA_character_
), levels = c("Clear", "Poor Visibility", "Rainy"), ordered = TRUE),
Long_Delivery_Flag= if_else(TARGET >= 40, 1, 0),
speed = if_else(TARGET > 0, as.integer(Distance..km. *60/ TARGET), NA_real_)
) %>%
drop_na() %>%
filter(
Delivery_location_longitude >= 60, Restaurant_longitude >= 60,
Delivery_location_latitude >= 0, Restaurant_latitude >= 0
)
# Check structure after cleaning
str(df_clean)
# View summary to check for remaining NA values
summary(df_clean)
dim(df_clean)
# View the cleaned dataset
head(df_clean)
setwd("C:\Users\Setup\OneDrive\02_Masterstudium\03_Module\02_Semester_2\03_ML1\group_work\Modelling-Food-Delivery-Time")
setwd("C:/Users/Setup/OneDrive/02_Masterstudium/03_Module/02_Semester_2/03_ML1/group_work/Modelling-Food-Delivery-Time")
list.files()
df <- read.csv("data/Food_Time_Data_Set.csv")
#Load and inspect the dataset.
# Read the CSV file
getwd()
setwd("C:/Users/Setup/OneDrive/02_Masterstudium/03_Module/02_Semester_2/03_ML1/group_work/Modelling-Food-Delivery-Time")
list.files()
library(tidyverse)
library(dplyr)
library(readr)
df <- read.csv("data/Food_Time_Data_Set.csv")
dim(df)
head(df)
summary(df)
# data cleaning
# Count NA values in each column
colSums(is.na(df))
df.food_time <- read.csv("data/Food_Time_Data_Set.csv")
library(tidyverse)
library(dplyr)
library(readr)
# Set working directory
getwd()
setwd("C:/Users/Setup/OneDrive/02_Masterstudium/03_Module/02_Semester_2/03_ML1/group_work/Modelling-Food-Delivery-Time")
list.files()
df.food_time <- read.csv("data/Food_Time_Data_Set.csv")
dim(df)
head(df)
summary(df)
# checking for NA values in each column
colSums(is.na(df.food_time))
df_clean <- df %>%
select(-X) %>%  # remove index column
mutate(
# Clean numeric values and convert to numeric
distance_km = as.numeric(na_if(gsub("[^0-9\\.]", "", Distance..km.), "")),
delivery_time_min = as.numeric(na_if(gsub("[^0-9\\.]", "", TARGET), "")),
# Clean and convert categorical variables to factors
order_type_factor = factor(str_trim(Type_of_order)),
vehicle_type_factor = factor(str_trim(Type_of_vehicle)),
# Clean traffic level (lowercase and trimmed)
traffic_level_cleaned = str_trim(tolower(Traffic_Level)),
traffic_level_factor = factor(traffic_level_cleaned),
# Clean weather description
weather_description_cleaned = str_trim(tolower(weather_description)),
weather_category_ordered = factor(case_when(
weather_description_cleaned %in% c("broken clouds", "clear sky", "few clouds", "overcast clouds", "scattered clouds") ~ "Clear",
weather_description_cleaned %in% c("fog", "haze", "smoke") ~ "Poor Visibility",
weather_description_cleaned %in% c("mist", "moderate rain", "light rain") ~ "Rainy",
TRUE ~ NA_character_
), levels = c("Clear", "Poor Visibility", "Rainy"), ordered = TRUE),
# Flag for long delivery time
long_delivery_flag = if_else(delivery_time_min >= 40, 1, 0),
# Calculate average speed (km/h)
average_speed_kmph = if_else(delivery_time_min > 0, distance_km * 60 / delivery_time_min, NA_real_)
) %>%
# Remove rows with missing values
drop_na() %>%
# Filter out invalid coordinates (approximate valid range for India)
filter(
delivery_location_longitude >= 60, restaurant_longitude >= 60,
delivery_location_latitude >= 0, restaurant_latitude >= 0
)
df.food_time <- df.food_time %>%
rename(
order_id = ID,
courier_id = Delivery_person_ID,
courier_age_years = Delivery_person_Age,
courier_rating_1_to_5 = Delivery_person_Ratings,
restaurant_latitude_deg = Restaurant_latitude,
restaurant_longitude_deg = Restaurant_longitude,
customer_latitude_deg = Delivery_location_latitude,
customer_longitude_deg = Delivery_location_longitude,
order_type = Type_of_order,
vehicle_type = Type_of_vehicle,
temperature_celsius = temperature,
humidity_percent = humidity,
precipitation_mm = precipitation,
weather_description = weather_description,
traffic_level = Traffic_Level,
distance_km = Distance..km.,
delivery_time_min = TARGET,
order_type_factor = type_of_order_factor,
vehicle_type_factor = type_of_vehicle_factor,
traffic_level_cleaned = Traffic_Level_cleaned,
traffic_level_factor = Traffic_Level_factor,
weather_description_cleaned = weather_description_cleaned,
weather_category = weather_descriptions_factor,
long_delivery_flag = Long_Delivery_Flag,
average_speed_kmph = speed
)
head(df)
df.food_time <- df.food_time %>%
rename(
order_id = ID,
courier_id = Delivery_person_ID,
courier_age_years = Delivery_person_Age,
courier_rating_1_to_5 = Delivery_person_Ratings,
restaurant_latitude_deg = Restaurant_latitude,
restaurant_longitude_deg = Restaurant_longitude,
customer_latitude_deg = Delivery_location_latitude,
customer_longitude_deg = Delivery_location_longitude,
order_type = Type_of_order,
vehicle_type = Type_of_vehicle,
temperature_celsius = temperature,
humidity_percent = humidity,
precipitation_mm = precipitation,
weather_description = weather_description,
traffic_level = Traffic_Level,
distance_km = Distance..km.,
delivery_time_min = TARGET
)
colnames(df.food_time)
df_clean <- df %>%
select(-index_x) %>%  # remove former index column (X)
mutate(
# Clean numeric values and convert to numeric
distance_km = as.numeric(na_if(gsub("[^0-9\\.]", "", distance_km), "")),
delivery_time_min = as.numeric(na_if(gsub("[^0-9\\.]", "", delivery_time_min), "")),
# Clean and convert categorical variables to factors
order_type_factor = factor(str_trim(order_type)),
vehicle_type_factor = factor(str_trim(vehicle_type)),
# Clean traffic level (lowercase and trimmed)
traffic_level_cleaned = str_trim(tolower(traffic_level)),
traffic_level_factor = factor(traffic_level_cleaned),
# Clean weather description
weather_description_cleaned = str_trim(tolower(weather_description)),
weather_category = factor(case_when(
weather_description_cleaned %in% c("broken clouds", "clear sky", "few clouds", "overcast clouds", "scattered clouds") ~ "Clear",
weather_description_cleaned %in% c("fog", "haze", "smoke") ~ "Poor Visibility",
weather_description_cleaned %in% c("mist", "moderate rain", "light rain") ~ "Rainy",
TRUE ~ NA_character_
), levels = c("Clear", "Poor Visibility", "Rainy"), ordered = TRUE),
# Flag for long delivery time
long_delivery_flag = if_else(delivery_time_min >= 40, 1, 0),
# Calculate average speed (km/h)
average_speed_kmph = if_else(delivery_time_min > 0, distance_km * 60 / delivery_time_min, NA_real_)
) %>%
# Remove rows with missing values
drop_na() %>%
# Filter out invalid coordinates (approximate valid range for India)
filter(
customer_longitude_deg >= 60, restaurant_longitude_deg >= 60,
customer_latitude_deg >= 0, restaurant_latitude_deg >= 0
)
df_clean <- df %>%
select(-X) %>%  # remove former index column (X)
mutate(
# Clean numeric values and convert to numeric
distance_km = as.numeric(na_if(gsub("[^0-9\\.]", "", distance_km), "")),
delivery_time_min = as.numeric(na_if(gsub("[^0-9\\.]", "", delivery_time_min), "")),
# Clean and convert categorical variables to factors
order_type_factor = factor(str_trim(order_type)),
vehicle_type_factor = factor(str_trim(vehicle_type)),
# Clean traffic level (lowercase and trimmed)
traffic_level_cleaned = str_trim(tolower(traffic_level)),
traffic_level_factor = factor(traffic_level_cleaned),
# Clean weather description
weather_description_cleaned = str_trim(tolower(weather_description)),
weather_category = factor(case_when(
weather_description_cleaned %in% c("broken clouds", "clear sky", "few clouds", "overcast clouds", "scattered clouds") ~ "Clear",
weather_description_cleaned %in% c("fog", "haze", "smoke") ~ "Poor Visibility",
weather_description_cleaned %in% c("mist", "moderate rain", "light rain") ~ "Rainy",
TRUE ~ NA_character_
), levels = c("Clear", "Poor Visibility", "Rainy"), ordered = TRUE),
# Flag for long delivery time
long_delivery_flag = if_else(delivery_time_min >= 40, 1, 0),
# Calculate average speed (km/h)
average_speed_kmph = if_else(delivery_time_min > 0, distance_km * 60 / delivery_time_min, NA_real_)
) %>%
# Remove rows with missing values
drop_na() %>%
# Filter out invalid coordinates (approximate valid range for India)
filter(
customer_longitude_deg >= 60, restaurant_longitude_deg >= 60,
customer_latitude_deg >= 0, restaurant_latitude_deg >= 0
)
names(df.food_time)
str(df.food_time$distance_km)
df_clean <- df %>%
select(-X) %>%  # remove former index column (X)
mutate(
# Clean numeric values and convert to numeric
distance_km = as.numeric(na_if(gsub("[^0-9\\.]", "", distance_km), "")),
delivery_time_min = as.numeric(na_if(gsub("[^0-9\\.]", "", delivery_time_min), "")),
# Clean and convert categorical variables to factors
order_type_factor = factor(str_trim(order_type)),
vehicle_type_factor = factor(str_trim(vehicle_type)),
# Clean traffic level (lowercase and trimmed)
traffic_level_cleaned = str_trim(tolower(traffic_level)),
traffic_level_factor = factor(traffic_level_cleaned),
# Clean weather description
weather_description_cleaned = str_trim(tolower(weather_description)),
weather_category = factor(case_when(
weather_description_cleaned %in% c("broken clouds", "clear sky", "few clouds", "overcast clouds", "scattered clouds") ~ "Clear",
weather_description_cleaned %in% c("fog", "haze", "smoke") ~ "Poor Visibility",
weather_description_cleaned %in% c("mist", "moderate rain", "light rain") ~ "Rainy",
TRUE ~ NA_character_
), levels = c("Clear", "Poor Visibility", "Rainy"), ordered = TRUE),
# Flag for long delivery time
long_delivery_flag = if_else(delivery_time_min >= 40, 1, 0),
# Calculate average speed (km/h)
average_speed_kmph = if_else(delivery_time_min > 0, distance_km * 60 / delivery_time_min, NA_real_)
) %>%
# Remove rows with missing values
drop_na() %>%
# Filter out invalid coordinates (approximate valid range for India)
filter(
customer_longitude_deg >= 60, restaurant_longitude_deg >= 60,
customer_latitude_deg >= 0, restaurant_latitude_deg >= 0
)
df_clean <- df.food_time %>%
select(-X) %>%  # remove former index column (X)
mutate(
# Clean numeric values and convert to numeric
distance_km = as.numeric(na_if(gsub("[^0-9\\.]", "", distance_km), "")),
delivery_time_min = as.numeric(na_if(gsub("[^0-9\\.]", "", delivery_time_min), "")),
# Clean and convert categorical variables to factors
order_type_factor = factor(str_trim(order_type)),
vehicle_type_factor = factor(str_trim(vehicle_type)),
# Clean traffic level (lowercase and trimmed)
traffic_level_cleaned = str_trim(tolower(traffic_level)),
traffic_level_factor = factor(traffic_level_cleaned),
# Clean weather description
weather_description_cleaned = str_trim(tolower(weather_description)),
weather_category = factor(case_when(
weather_description_cleaned %in% c("broken clouds", "clear sky", "few clouds", "overcast clouds", "scattered clouds") ~ "Clear",
weather_description_cleaned %in% c("fog", "haze", "smoke") ~ "Poor Visibility",
weather_description_cleaned %in% c("mist", "moderate rain", "light rain") ~ "Rainy",
TRUE ~ NA_character_
), levels = c("Clear", "Poor Visibility", "Rainy"), ordered = TRUE),
# Flag for long delivery time
long_delivery_flag = if_else(delivery_time_min >= 40, 1, 0),
# Calculate average speed (km/h)
average_speed_kmph = if_else(delivery_time_min > 0, distance_km * 60 / delivery_time_min, NA_real_)
) %>%
# Remove rows with missing values
drop_na() %>%
# Filter out invalid coordinates (approximate valid range for India)
filter(
customer_longitude_deg >= 60, restaurant_longitude_deg >= 60,
customer_latitude_deg >= 0, restaurant_latitude_deg >= 0
)
# Check for missing values in cleaned data
colSums(is.na(df_clean))
str(df_clean)
dim(df_clean)
# View the cleaned dataset
head(df_clean)
write.csv(df_clean, "../data/cleaned_data.csv", row.names = FALSE)
# View the cleaned dataset
getwd()
write.csv(df_clean, "../data/cleaned_data.csv", row.names = FALSE)
# View the cleaned dataset
getwd()
write.csv(df_clean, "/data/cleaned_data.csv", row.names = FALSE)
write.csv(df_clean, "data/cleaned_data.csv", row.names = FALSE)
dim(df_clean)
str(df_clean)
head(df_clean)
d.food_time <- read.csv("C:/Users/Setup/OneDrive/02_Masterstudium/03_Module/02_Semester_2/03_ML1/group_work/Modelling-Food-Delivery-Time/data/cleaned_data.csv", header = TRUE)
str(d.food_time)
head(d.food_time)
summary(d.food_time)
colSums(is.na(d.food_time))
hist(d.food_time$TARGET)
hist(d.food_time$delivery_time_min)
hist(d.food_time$delivery_time_min)
str(d.food_time)
colnames(d.food_time)
View(d.food_time)
hist(d.food_time$delivery_time_min)
hist(log(d.food_time$delivery_time_min))
hist(d.food_time$delivery_time_min)
hist(log(d.food_time$delivery_time_min))
hist(d.food_time$delivery_time_min)
hist(log(d.food_time$delivery_time_min))
str(d.food_time)
str(d.food_time)
summary(d.food_time)
hist(d.food_time$delivery_time_min)
hist(d.food_time$distance_km)
#Checking distributions
hist(d.food_time$delivery_time_min)
hist(d.food_time$distance_km)
#Checking distribution of target variable
hist(d.food_time$delivery_time_min, main = "Distribution of delivery time [min]")
boxplot(d.food_time$delivery_time_min, main = "Distribution of delivery time [min]")
#Checking distribution of target variable
hist(d.food_time$delivery_time_min, main = "Distribution of delivery time [min]")
boxplot(d.food_time$delivery_time_min, main = "Distribution of delivery time [min]")
boxplot(log(d.food_time$delivery_time_min), main = "Distribution of delivery time [min]")
boxplot(d.food_time$delivery_time_min, main = "Distribution of delivery time [min]")
summary(d.food_time)
#Checking distribution of target variable
hist(d.food_time$delivery_time_min, main = "Distribution of delivery time [min]")
summary(d.food_time$delivery_time_min)
boxplot(d.food_time$delivery_time_min, main = "Distribution of delivery time [min]")
#Log transforming target variable and investigating it's distribution
hist(log(d.food_time$delivery_time_min, main = "Log-transformed distribution of delivery time"))
#Log transforming target variable and investigating it's distribution
hist(log(d.food_time$delivery_time_min, main = "Log-transformed distribution of delivery time"))
#Log transforming target variable and investigating it's distribution
hist(log(d.food_time$delivery_time_min), main = "Log-transformed distribution of delivery time")
boxplot(d.food_time$delivery_time_min, main = "Boxplot of log-transformed delivery time [min]")
boxplot(log(d.food_time$delivery_time_min), main = "Boxplot of log-transformed delivery time [min]")
summary(log(d.food_time$delivery_time_min))
#Log transforming target variable and investigating it's distribution
hist(log(d.food_time$delivery_time_min), main = "Log-transformed distribution of delivery time")
d.food_time <- d.food_time %>%
mutate(log_delivery_time = log(delivery_time_min))
str(d.food_time)
hist(d.food_time$log_delivery_time)
hist(sqrt(d.food_time))
hist(sqrt(d.food_time$delivery_time_min))
#Log transforming target variable and investigating it's distribution
hist(log(d.food_time$delivery_time_min), main = "Log-transformed distribution of delivery time")
hist(sqrt(d.food_time$delivery_time_min))
hist(d.food_time$delivery_time_min)
hist(sqrt(d.food_time$delivery_time_min))
hist(d.food_time$delivery_time_min)
par(mfrow = c(3,1))
hist(sqrt(d.food_time$delivery_time_min))
hist(d.food_time$delivery_time_min)
hist(d.food_time$log_delivery_time)
summary(d.food_time)
numeric_vars <- d.food_time %>%
select(distance_km, courier_age_years, courier_rating_1_to_5,
temperature_celsius, humidity_percent, precipitation_mm, average_speed_kmph)
par(mfrow = c(3, 3))  # 3x3 Raster
for (var in names(numeric_vars)) {
hist(numeric_vars[[var]], main = var, xlab = var, col = "lightgray", breaks = 30)
}
library(ggplot2)
for (var in numeric_predictors) {
p <- ggplot(d.food_time, aes_string(x = var, y = target)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste(var, "vs", target), x = var, y = target)
print(p)
}
numeric_predictors <- c("distance_km", "courier_age_years", "courier_rating_1_to_5",
"temperature_celsius", "humidity_percent", "precipitation_mm",
"average_speed_kmph")
# Zielvariable
target <- "log_delivery_time"  # oder "delivery_time_min"
for (var in numeric_predictors) {
p <- ggplot(d.food_time, aes_string(x = var, y = target)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste(var, "vs", target), x = var, y = target)
print(p)
}
numeric_predictors <- c("distance_km", "courier_age_years", "courier_rating_1_to_5",
"temperature_celsius", "humidity_percent", "precipitation_mm",
"average_speed_kmph")
# Wähle numerische Prädiktoren und Zielvariable
predictors <- d.food_time %>%
select(distance_km, courier_age_years, courier_rating_1_to_5,
temperature_celsius, humidity_percent, precipitation_mm,
average_speed_kmph, log_delivery_time)
# Scatterplot-Matrix
pairs(predictors, main = "Scatterplot Matrix of Predictors", pch = 20, col = rgb(0, 0, 0, 0.2))
numeric_predictors <- c("distance_km", "courier_age_years", "courier_rating_1_to_5",
"temperature_celsius", "humidity_percent", "precipitation_mm",
"average_speed_kmph")
# Wähle numerische Prädiktoren und Zielvariable
predictors <- d.food_time %>%
select(distance_km, courier_age_years, courier_rating_1_to_5,
temperature_celsius, humidity_percent, precipitation_mm,
average_speed_kmph, log_delivery_time)
# Scatterplot-Matrix
pairs(predictors, main = "Scatterplot Matrix of Predictors", pch = 20, col = rgb(0, 0, 0, 0.2))
# Scatterplot-Matrix
pairs(predictors, main = "Scatterplot Matrix of Predictors", pch = 20, col = rgb(0, 0, 0, 0.2))
# Scatterplot-Matrix
pairs(predictors, main = "Scatterplot Matrix of Predictors", pch = 20, col = rgb(0, 0, 0, 0.2))
