"temperature_celsius", "humidity_percent", "precipitation_mm",
"average_speed_kmph")
# Loop to plot all the scatterplot of numeric variables
plot(d.food_time[[var]], d.food_time[[target2]],
main = paste(var, "vs", target2),
xlab = var, ylab = target2,
pch = 20, col = rgb(0, 0, 0, 0.3))
par(mfrow = c(3, 3))
##Attempt 2 with not log transformed target
# Variable for target variable
target2 <- "delivery_time_min"
# Predictors, just numeric.
numeric_predictors <- c("distance_km", "courier_age_years", "courier_rating_1_to_5",
"temperature_celsius", "humidity_percent", "precipitation_mm",
"average_speed_kmph")
# Loop to plot all the scatterplot of numeric variables
plot(d.food_time[[var]], d.food_time[[target2]],
main = paste(var, "vs", target2),
xlab = var, ylab = target2,
pch = 20, col = rgb(0, 0, 0, 0.3))
par(mfrow = c(3, 3))
# Variable for target variable
target <- "delivery_time_min"
# Predictors, just numeric.
numeric_predictors <- c("distance_km", "courier_age_years", "courier_rating_1_to_5",
"temperature_celsius", "humidity_percent", "precipitation_mm",
"average_speed_kmph")
# Loop to plot all the scatterplot of numeric variables
for (var in numeric_predictors) {
plot(d.food_time[[var]], d.food_time[[target]],
main = paste(var, "vs", target),
xlab = var, ylab = target,
pch = 20, col = rgb(0, 0, 0, 0.3))
}
# Variable for target variable
target <- "log_delivery_time"
# Predictors, just numeric.
numeric_predictors <- c("distance_km", "courier_age_years", "courier_rating_1_to_5",
"temperature_celsius", "humidity_percent", "precipitation_mm",
"average_speed_kmph")
# Loop to plot all the scatterplot of numeric variables
for (var in numeric_predictors) {
plot(d.food_time[[var]], d.food_time[[target]],
main = paste(var, "vs", target),
xlab = var, ylab = target,
pch = 20, col = rgb(0, 0, 0, 0.3))
}
# Variable for target variable
target <- "log_delivery_time"
# Predictors, just numeric.
numeric_predictors <- c("distance_km", "courier_age_years", "courier_rating_1_to_5",
"temperature_celsius", "humidity_percent", "precipitation_mm",
"average_speed_kmph")
# Loop to plot all the scatterplot of numeric variables
for (var in numeric_predictors) {
plot(d.food_time[[var]], d.food_time[[target]],
main = paste(var, "vs", target),
xlab = var, ylab = target,
pch = 20, col = rgb(0, 0, 0, 0.3))
}
par(mfrow = c(3, 3))
# Variable for target variable
target <- "log_delivery_time"
# Predictors, just numeric.
numeric_predictors <- c("distance_km", "courier_age_years", "courier_rating_1_to_5",
"temperature_celsius", "humidity_percent", "precipitation_mm",
"average_speed_kmph")
# Loop to plot all the scatterplot of numeric variables
for (var in numeric_predictors) {
plot(d.food_time[[var]], d.food_time[[target]],
main = paste(var, "vs", target),
xlab = var, ylab = target,
pch = 20, col = rgb(0, 0, 0, 0.3))
}
library(tidyverse)
library(dplyr)
library(readr)
# Set working directory
getwd()
setwd("C:/Users/Setup/OneDrive/02_Masterstudium/03_Module/02_Semester_2/03_ML1/group_work/Modelling-Food-Delivery-Time")
list.files()
df.food_time <- read.csv("../data/Food_Time_Data_Set.csv")
dim(df)
head(df)
summary(df)
library(tidyverse)
library(dplyr)
library(readr)
# Set working directory
getwd()
setwd("C:/Users/Setup/OneDrive/02_Masterstudium/03_Module/02_Semester_2/03_ML1/group_work/Modelling-Food-Delivery-Time")
list.files()
df.food_time <- read.csv("../data/Food_Time_Data_Set.csv")
dim(df)
dim(df.food_time)
head(df.food_time)
summary(df.food_time)
df.food_time <- df.food_time %>%
rename(
order_id = ID,
courier_id = Delivery_person_ID,
courier_age_years = Delivery_person_Age,
courier_rating_1_to_5 = Delivery_person_Ratings,
restaurant_latitude_deg = Restaurant_latitude,
restaurant_longitude_deg = Restaurant_longitude,
customer_latitude_deg = Delivery_location_latitude,
customer_longitude_deg = Delivery_location_longitude,
order_type = Type_of_order,
vehicle_type = Type_of_vehicle,
temperature_celsius = temperature,
humidity_percent = humidity,
precipitation_mm = precipitation,
weather_description = weather_description,
traffic_level = Traffic_Level,
distance_km = Distance..km.,
delivery_time_min = TARGET
)
colnames(df.food_time)
df_clean <- df.food_time %>%
select(-X) %>%
mutate(
# Clean numeric values and convert to numeric
distance_km = as.numeric(na_if(gsub("[^0-9\\.]", "", distance_km), "")),
delivery_time_min = as.numeric(na_if(gsub("[^0-9\\.]", "", delivery_time_min), "")),
# Clean and convert categorical variables to factors
order_type_factor = factor(str_trim(order_type)),
vehicle_type_factor = factor(str_trim(vehicle_type)),
# Clean traffic level (lowercase and trimmed)
traffic_level_cleaned = str_trim(tolower(traffic_level)),
traffic_level_factor = factor(traffic_level_cleaned),
# Clean weather description
weather_description_cleaned = str_trim(tolower(weather_description)),
weather_category = factor(case_when(
weather_description_cleaned %in% c("broken clouds", "clear sky", "few clouds", "overcast clouds", "scattered clouds") ~ "Clear",
weather_description_cleaned %in% c("fog", "haze", "smoke") ~ "Poor Visibility",
weather_description_cleaned %in% c("mist", "moderate rain", "light rain") ~ "Rainy",
TRUE ~ NA_character_
), levels = c("Clear", "Poor Visibility", "Rainy"), ordered = TRUE),
# Flag for long delivery time
long_delivery_flag = if_else(delivery_time_min >= 40, 1, 0),
# Calculate average speed (km/h)
average_speed_kmph = as.integer(if_else(delivery_time_min > 0, distance_km * 60 / delivery_time_min, NA_real_))
) %>%
drop_na() %>%
filter(
customer_longitude_deg >= 60, restaurant_longitude_deg >= 60,
customer_latitude_deg >= 0, restaurant_latitude_deg >= 0
)
# Check structure after cleaning
str(df_clean)
# Check for missing values in cleaned data & str
colSums(is.na(df_clean))
str(df_clean)
dim(df_clean)
# View the cleaned dataset
getwd()
head(df_clean)
write.csv(df_clean, "../data/cleaned_data.csv", row.names = FALSE)
dim(df_clean)
str(df_clean)
head(df_clean)
View(df_clean)
library(ggplot2)
library(dplyr)
d.food_time <- read.csv("C:/Users/Setup/OneDrive/02_Masterstudium/03_Module/02_Semester_2/03_ML1/group_work/Modelling-Food-Delivery-Time/data/cleaned_data.csv", header = TRUE)
d.food_time <- read.csv("C:/Users/Setup/OneDrive/02_Masterstudium/03_Module/02_Semester_2/03_ML1/group_work/Modelling-Food-Delivery-Time/data/cleaned_data.csv", header = TRUE)
d.food_time <- read.csv("C:/Users/Setup/OneDrive/02_Masterstudium/03_Module/02_Semester_2/03_ML1/git_group_work/Modelling-Food-Delivery-Time/data/cleaned_data.csv", header = TRUE)
str(d.food_time)
head(d.food_time)
summary(d.food_time)
colSums(is.na(d.food_time))
colnames(d.food_time)
View(d.food_time)
##Checking distribution of target variable
hist(d.food_time$delivery_time_min, main = "Distribution of delivery time [min]")
boxplot(d.food_time$delivery_time_min, main = "Boxplot of delivery time [min]")
summary(d.food_time$delivery_time_min)
str(d.food_time)
head(d.food_time)
summary(d.food_time)
colSums(is.na(d.food_time))
colnames(d.food_time)
View(d.food_time)
##Checking distribution of target variable
hist(d.food_time$delivery_time_min, main = "Distribution of delivery time [min]")
boxplot(d.food_time$delivery_time_min, main = "Boxplot of delivery time [min]")
summary(d.food_time$delivery_time_min)
"""
Comments on distribution of target variable:
- From looking at the histogramm, we see that the distribution is right-skewed
- This is furhtermore confirmed by the boxplot which shows outliers
- Furthermore from looking at summary of delivery_time_min we see that Mean is > Median
- And Max Value is 4x the size of median
Due to this, we will log transform our target variable.
"""
#Log transforming target variable and investigating it's distribution
hist(log(d.food_time$delivery_time_min), main = "Log-transformed distribution of delivery time")
boxplot(log(d.food_time$delivery_time_min), main = "Boxplot of log-transformed delivery time [min]")
summary(log(d.food_time$delivery_time_min))
d.food_time <- d.food_time %>%
mutate(log_delivery_time = log(delivery_time_min))
numeric_vars <- d.food_time %>%
select(distance_km, courier_age_years, courier_rating_1_to_5,
temperature_celsius, humidity_percent, precipitation_mm, average_speed_kmph)
par(mfrow = c(3, 3))
for (var in names(numeric_vars)) {
hist(numeric_vars[[var]], main = var, xlab = var, col = "lightgray", breaks = 30)
}
par(mfrow = c(3, 3))
# Variable for target variable
target <- "log_delivery_time"
# Predictors, just numeric.
numeric_predictors <- c("distance_km", "courier_age_years", "courier_rating_1_to_5",
"temperature_celsius", "humidity_percent")
# Loop to plot all the scatterplot of numeric variables
for (var in numeric_predictors) {
plot(d.food_time[[var]], d.food_time[[target]],
main = paste(var, "vs", target),
xlab = var, ylab = target,
pch = 20, col = rgb(0, 0, 0, 0.3))
}
# Variable for target variable
target <- "delivery_time_min"
# Predictors, just numeric.
numeric_predictors <- c("distance_km", "courier_age_years", "courier_rating_1_to_5",
"temperature_celsius", "humidity_percent")
# Loop to plot all the scatterplot of numeric variables
for (var in numeric_predictors) {
plot(d.food_time[[var]], d.food_time[[target]],
main = paste(var, "vs", target),
xlab = var, ylab = target,
pch = 20, col = rgb(0, 0, 0, 0.3))
}
par(mfrow = c(3, 3))
# Variable for target variable
target <- "delivery_time_min"
# Predictors, just numeric.
numeric_predictors <- c("distance_km", "courier_age_years", "courier_rating_1_to_5",
"temperature_celsius", "humidity_percent")
# Loop to plot all the scatterplot of numeric variables
for (var in numeric_predictors) {
plot(d.food_time[[var]], d.food_time[[target]],
main = paste(var, "vs", target),
xlab = var, ylab = target,
pch = 20, col = rgb(0, 0, 0, 0.3))
}
# Variable for target variable
target <- "log_delivery_time"
par(mfrow = c(3, 3))
# Variable for target variable
target <- "log_delivery_time"
# Predictors, just numeric.
numeric_predictors <- c("distance_km", "courier_age_years", "courier_rating_1_to_5",
"temperature_celsius", "humidity_percent")
# Loop to plot all the scatterplot of numeric variables
for (var in numeric_predictors) {
plot(d.food_time[[var]], d.food_time[[target]],
main = paste(var, "vs", target),
xlab = var, ylab = target,
pch = 20, col = rgb(0, 0, 0, 0.3))
}
par(mfrow = c(3, 3))
# Variable for target variable
target <- "log_delivery_time"
# Predictors, just numeric.
numeric_predictors <- c("distance_km", "courier_age_years", "courier_rating_1_to_5",
"temperature_celsius", "humidity_percent")
# Loop to plot all the scatterplot of numeric variables
for (var in numeric_predictors) {
plot(d.food_time[[var]], d.food_time[[target]],
main = paste(var, "vs", target),
xlab = var, ylab = target,
pch = 20, col = rgb(0, 0, 0, 0.3))
abline(lm(d.food_time[[target]] ~ d.food_time[[var]]),
col = "blue", lwd = 2)
}
cor(d.food_time[, c(numeric_predictors, target)])
str(d.food_time)
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time)
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time)
par(mfrow = c(2,2))
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time)
boxplot(log_delivery_time ~ vehicle_type_factor, data = d.food_time)
boxplot(log_delivery_time ~ traffic_level_factor, data = d.food_time)
boxplot(log_delivery_time ~ weather_category, data = d.food_time)
# Boxplot: distance_km nach Bestelltyp
boxplot(distance_km ~ order_type_factor, data = d.food_time,
main = "Distance (km) by Order Type",
xlab = "Order Type", ylab = "Distance (km)",
col = "lightblue")
# Boxplot: distance_km nach Fahrzeugtyp
boxplot(distance_km ~ vehicle_type_factor, data = d.food_time,
main = "Distance (km) by Vehicle Type",
xlab = "Vehicle Type", ylab = "Distance (km)",
col = "lightgreen")
# Boxplot: distance_km nach Verkehrslevel
boxplot(distance_km ~ traffic_level_factor, data = d.food_time,
main = "Distance (km) by Traffic Level",
xlab = "Traffic Level", ylab = "Distance (km)",
col = "orange")
# Boxplot: distance_km nach Wetterkategorie
boxplot(distance_km ~ weather_category, data = d.food_time,
main = "Distance (km) by Weather Category",
xlab = "Weather", ylab = "Distance (km)",
col = "lightgray")
boxplot(log_delivery_time ~ traffic_level_factor, data = d.food_time)
# Boxplot: distance_km nach Verkehrslevel
boxplot(distance_km ~ traffic_level_factor, data = d.food_time,
main = "Distance (km) by Traffic Level",
xlab = "Traffic Level", ylab = "Distance (km)",
col = "orange")
# Optional: Mehrere Plots auf einer Seite
par(mfrow = c(2, 2), mar = c(5, 5, 4, 2))  # Layout + Ränder anpassen
# 1. Boxplot nach Order Type
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time,
main = "Log Delivery Time by Order Type",
xlab = "Order Type", ylab = "log(Delivery Time)",
col = "lightblue", border = "darkblue", cex.axis = 0.8)
# 2. Boxplot nach Vehicle Type
boxplot(log_delivery_time ~ vehicle_type_factor, data = d.food_time,
main = "Log Delivery Time by Vehicle Type",
xlab = "Vehicle Type", ylab = "log(Delivery Time)",
col = "lightgreen", border = "darkgreen", cex.axis = 0.8)
# 3. Boxplot nach Traffic Level
boxplot(log_delivery_time ~ traffic_level_factor, data = d.food_time,
main = "Log Delivery Time by Traffic Level",
xlab = "Traffic Level", ylab = "log(Delivery Time)",
col = "orange", border = "darkorange", cex.axis = 0.8)
# 4. Boxplot nach Weather Category
boxplot(log_delivery_time ~ weather_category, data = d.food_time,
main = "Log Delivery Time by Weather",
xlab = "Weather Category", ylab = "log(Delivery Time)",
col = "lightgray", border = "black", cex.axis = 0.8)
# 1. Boxplot nach Order Type
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time,
main = "Log Delivery Time by Order Type",
xlab = "Order Type", ylab = "log(Delivery Time)",
col = "lightblue", border = "darkblue", cex.axis = 0.8)
# 2. Boxplot nach Vehicle Type
boxplot(log_delivery_time ~ vehicle_type_factor, data = d.food_time,
main = "Log Delivery Time by Vehicle Type",
xlab = "Vehicle Type", ylab = "log(Delivery Time)",
col = "lightgreen", border = "darkblue", cex.axis = 0.8)
# 3. Boxplot nach Traffic Level
boxplot(log_delivery_time ~ traffic_level_factor, data = d.food_time,
main = "Log Delivery Time by Traffic Level",
xlab = "Traffic Level", ylab = "log(Delivery Time)",
col = "orange", border = "darkblue", cex.axis = 0.8)
# 4. Boxplot nach Weather Category
boxplot(log_delivery_time ~ weather_category, data = d.food_time,
main = "Log Delivery Time by Weather",
xlab = "Weather Category", ylab = "log(Delivery Time)",
col = "lightgray", border = "darkblue", cex.axis = 0.8)
par(mfrow = c(2, 2), mar = c(5, 5, 4, 2))
# Boxplot for order type
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time,
main = "Log Delivery Time by Order Type",
xlab = "Order Type", ylab = "log(Delivery Time)",
col = "lightblue", border = "darkblue", cex.axis = 0.8)
# Boxplot for vehicle type
boxplot(log_delivery_time ~ vehicle_type_factor, data = d.food_time,
main = "Log Delivery Time by Vehicle Type",
xlab = "Vehicle Type", ylab = "log(Delivery Time)",
col = "lightgreen", border = "darkblue", cex.axis = 0.8)
# boxplot for traffic level
boxplot(log_delivery_time ~ traffic_level_factor, data = d.food_time,
main = "Log Delivery Time by Traffic Level",
xlab = "Traffic Level", ylab = "log(Delivery Time)",
col = "orange", border = "darkblue", cex.axis = 0.8)
# boxplot for weather category
boxplot(log_delivery_time ~ weather_category, data = d.food_time,
main = "Log Delivery Time by Weather",
xlab = "Weather Category", ylab = "log(Delivery Time)",
col = "lightgray", border = "darkblue", cex.axis = 0.8)
boxplot(distance_km ~ vehicle_type_factor)
boxplot(distance_km ~ vehicle_type_factor, data = d.food_time)
# Boxplot for order type
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time,
main = "Log Delivery Time by Order Type",
xlab = "Order Type", ylab = "log(Delivery Time)",
col = "lightblue", border = "darkblue", cex.axis = 0.8)
# Boxplot for vehicle type
boxplot(log_delivery_time ~ vehicle_type_factor, data = d.food_time,
main = "Log Delivery Time by Vehicle Type",
xlab = "Vehicle Type", ylab = "log(Delivery Time)",
col = "lightgreen", border = "darkblue", cex.axis = 0.8)
# boxplot for traffic level
boxplot(log_delivery_time ~ traffic_level_factor, data = d.food_time,
main = "Log Delivery Time by Traffic Level",
xlab = "Traffic Level", ylab = "log(Delivery Time)",
col = "orange", border = "darkblue", cex.axis = 0.8)
# boxplot for weather category
boxplot(log_delivery_time ~ weather_category, data = d.food_time,
main = "Log Delivery Time by Weather",
xlab = "Weather Category", ylab = "log(Delivery Time)",
col = "lightgray", border = "darkblue", cex.axis = 0.8)
# Boxplot for order type
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time,
main = "Log Delivery Time by Order Type",
xlab = "Order Type", ylab = "log(Delivery Time)",
col = "lightblue", border = "darkblue", cex.axis = 0.8)
# Boxplot for vehicle type
boxplot(log_delivery_time ~ vehicle_type_factor, data = d.food_time,
main = "Log Delivery Time by Vehicle Type",
xlab = "Vehicle Type", ylab = "log(Delivery Time)",
col = "lightgreen", border = "darkblue", cex.axis = 0.8)
par(mfrow = c(2, 2), mar = c(5, 5, 4, 2))
# Boxplot for order type
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time,
main = "Log Delivery Time by Order Type",
xlab = "Order Type", ylab = "log(Delivery Time)",
col = "lightblue", border = "darkblue", cex.axis = 0.8)
# Boxplot for vehicle type
boxplot(log_delivery_time ~ vehicle_type_factor, data = d.food_time,
main = "Log Delivery Time by Vehicle Type",
xlab = "Vehicle Type", ylab = "log(Delivery Time)",
col = "lightgreen", border = "darkblue", cex.axis = 0.8)
# boxplot for traffic level
boxplot(log_delivery_time ~ traffic_level_factor, data = d.food_time,
main = "Log Delivery Time by Traffic Level",
xlab = "Traffic Level", ylab = "log(Delivery Time)",
col = "orange", border = "darkblue", cex.axis = 0.8)
# boxplot for weather category
boxplot(log_delivery_time ~ weather_category, data = d.food_time,
main = "Log Delivery Time by Weather",
xlab = "Weather Category", ylab = "log(Delivery Time)",
col = "lightgray", border = "darkblue", cex.axis = 0.8)
boxplot(distance_km ~ vehicle_type_factor, data = d.food_time)
# boxplot for weather category
boxplot(log_delivery_time ~ weather_category, data = d.food_time,
main = "Log Delivery Time by Weather",
xlab = "Weather Category", ylab = "log(Delivery Time)",
col = "lightgray", border = "darkblue", cex.axis = 0.8)
# Boxplot for order type
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time,
main = "Log Delivery Time by Order Type",
xlab = "Order Type", ylab = "log(Delivery Time)",
col = "lightblue", border = "darkblue", cex.axis = 0.8)
# Using ggplot to create a scatterplot with traffic level in diffent colours
ggplot(d.food_time, aes(x = distance_km, y = log_delivery_time, color = traffic_level_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Traffic Level",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Traffic Level"
) +
theme_minimal()
ggplot(d.food_time, aes(x = distance_km, y = log_delivery_time, color = order_type_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Order Type",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Order Type"
) +
theme_minimal()
# Using ggplot to create a scatterplot (delivery time ~ distance) with traffic level in different colors
ggplot(d.food_time, aes(x = distance_km, y = log_delivery_time, color = traffic_level_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Traffic Level",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Traffic Level"
) +
theme_minimal()
# Boxplot for order type
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time,
main = "Log Delivery Time by Order Type",
xlab = "Order Type", ylab = "log(Delivery Time)",
col = "lightblue", border = "darkblue", cex.axis = 0.8)
# Boxplot for vehicle type
boxplot(log_delivery_time ~ vehicle_type_factor, data = d.food_time,
main = "Log Delivery Time by Vehicle Type",
xlab = "Vehicle Type", ylab = "log(Delivery Time)",
col = "lightgreen", border = "darkblue", cex.axis = 0.8)
# boxplot for traffic level
boxplot(log_delivery_time ~ traffic_level_factor, data = d.food_time,
main = "Log Delivery Time by Traffic Level",
xlab = "Traffic Level", ylab = "log(Delivery Time)",
col = "orange", border = "darkblue", cex.axis = 0.8)
# boxplot for weather category
boxplot(log_delivery_time ~ weather_category, data = d.food_time,
main = "Log Delivery Time by Weather",
xlab = "Weather Category", ylab = "log(Delivery Time)",
col = "lightgray", border = "darkblue", cex.axis = 0.8)
# Using ggplot to create a scatterplot (delivery time ~ distance) with traffic level in different colors
ggplot(d.food_time, aes(x = distance_km, y = log_delivery_time, color = traffic_level_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Traffic Level",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Traffic Level"
) +
theme_minimal()
# Using ggplot to create a scatterplot (delivery time ~ distance) with order type in different colors
ggplot(d.food_time, aes(x = distance_km, y = log_delivery_time, color = order_type_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Order Type",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Order Type"
) +
theme_minimal()
# Boxplot for order type
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time,
main = "Log Delivery Time by Order Type",
xlab = "Order Type", ylab = "log(Delivery Time)",
col = "lightblue", border = "darkblue", cex.axis = 0.8)
