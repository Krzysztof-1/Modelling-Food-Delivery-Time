# Using ggplot to create a scatterplot (delivery time ~ distance) with traffic level in different colors
ggplot(d.food_time, aes(x = distance_km, y = log_delivery_time, color = traffic_level_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Traffic Level",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Traffic Level"
) +
theme_minimal()
# Using ggplot to create a scatterplot (delivery time ~ distance) with traffic level in different colors
ggplot(d.food_time, aes(x = distance_km, y = log_delivery_time, color = traffic_level_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Traffic Level",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Traffic Level"
) +
theme_minimal()
# Out of curiosity [Do not use for report]: same plot but not with log transformed delivery time
ggplot(d.food_time, aes(x = distance_km, y = delivery_time_min, color = traffic_level_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Traffic Level",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Traffic Level"
) +
theme_minimal()
# Out of curiosity [Do not use for report]: same plot but not with log transformed delivery time
ggplot(d.food_time, aes(x = distance_km, y = delivery_time_min, color = traffic_level_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Traffic Level",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Traffic Level"
) +
theme_minimal()
# Using ggplot to create a scatterplot (delivery time ~ distance) with traffic level in different colors
ggplot(d.food_time, aes(x = distance_km, y = log_delivery_time, color = traffic_level_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Traffic Level",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Traffic Level"
) +
theme_minimal()
numeric_vars <- d.food_time %>%
select(distance_km, courier_age_years, courier_rating_1_to_5,
temperature_celsius, humidity_percent, precipitation_mm, average_speed_kmph)
par(mfrow = c(3, 3))
for (var in names(numeric_vars)) {
hist(numeric_vars[[var]], main = var, xlab = var, col = "lightgray", breaks = 30)
}
##Checking distribution of target variable
hist(d.food_time$delivery_time_min, main = "Distribution of delivery time [min]")
boxplot(d.food_time$delivery_time_min, main = "Boxplot of delivery time [min]")
summary(d.food_time$delivery_time_min)
#Log transforming target variable and investigating it's distribution
hist(log(d.food_time$delivery_time_min), main = "Log-transformed distribution of delivery time")
# Exponentiate coefficients from model
exp(lm.delivery1$coefficients)
# Investigating model coefficients
summary(lm.delivery1)
# Exponentiate coefficients from model
exp(lm.delivery1$coefficients)
plot(d.food_time$traffic_level_factor)
library(caret)
set.seed(42)
train_indices <- createDataPartition(d.food_time$traffic_level_factor, p = 0.8, list = FALSE)
train_data <- d.food_time[train_indices, ]
test_data  <- d.food_time[-train_indices, ]
# Fitting linear model with two numeric and two categorial variables
lm.delivery1 <- lm(log_delivery_time ~ distance_km + courier_rating_1_to_5 + traffic_level_factor + order_type_factor, data = train_data)
# Investigating model coefficients
summary(lm.delivery1)
# Exponentiate coefficients from model
exp(lm.delivery1$coefficients)
# Confidence intervals for coefficients
confint(lm.delivery1)
# Investigating model coefficients
summary(lm.delivery1)
# Exponentiate coefficients from model
exp(lm.delivery1$coefficients)
# Confidence intervals for coefficients
confint(lm.delivery1)
# Investigating model coefficients
summary(lm.delivery1)
# diagnostic plots
par(mfrow = c(2, 2))
# diagnostic plots
par(mfrow = c(2, 2))
plot(lm.delivery1)
# prepare data
df_plot <- data.frame(
fitted = fitted(lm.delivery1),
residuals = resid(lm.delivery1)
)
# Plot: residuals vs Fitted
ggplot(df_plot, aes(x = fitted, y = residuals)) +
geom_point(alpha = 0.3) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(title = "Residuals vs Fitted",
x = "Fitted Values",
y = "Residuals") +
theme_minimal()
qqnorm(resid(lm.delivery1))
qqline(resid(lm.delivery1), col = "red")
# Plot: residuals vs Fitted
ggplot(df_plot, aes(x = fitted, y = residuals)) +
geom_point(alpha = 0.3) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(title = "Residuals vs Fitted",
x = "Fitted Values",
y = "Residuals") +
theme_minimal()
drop1(lm.delivery1, test = "F")
lm.delivery2 <- update(lm.delivery1, . ~ . - courier_rating_1_to_5)
summary(lm.delivery2)
summary(lm.delivery1)
drop1(lm.delivery2, test = "F")
# Akaike Information Criterion
AIC(lm.delivery1)
AIC(lm.delivery2)
# Including interaction between distance_km and traffic_level_factor
lm.interaction <- lm(log_delivery_time ~ distance_km * traffic_level_factor + order_type_factor, data = train_data)
summary(lm.interaction)
par(mfrow = c(2,2))
plot(lm.interaction)
lm.interaction
summary(lm.interaction)
summary(lm.delivery2)
# AIC to compare models
AIC(lm.delivery2)
AIC(lm.interaction)
# anova to compare models
anova(lm.delivery2, lm.interation)
# anova to compare models
anova(lm.delivery2, lm.interaction)
predicted_log <- predict(lm.interaction, newdata = test_data)
predicted_min <- exp(predicted_log)
actual_min <- test_data$delivery_time_min
rmse <- sqrt(mean((predicted_min - actual_min)^2))
r_squared <- 1 - sum((predicted_min - actual_min)^2) / sum((actual_min - mean(actual_min))^2)
rmse
r_squared
ggplot(train_data, aes(x = distance_km, y = log_delivery_time, color = traffic_level_factor)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
predicted_log <- predict(lm.interaction, newdata = test_data)
predicted_min <- exp(predicted_log)
actual_min <- test_data$delivery_time_min
rmse <- sqrt(mean((predicted_min - actual_min)^2))
r_squared <- 1 - sum((predicted_min - actual_min)^2) / sum((actual_min - mean(actual_min))^2)
rmse
r_squared
ggplot(test_data, aes(x = predicted_min, y = actual_min)) +
geom_point(alpha = 0.3) +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(
title = "Predicted vs Actual Delivery Time",
x = "Predicted Delivery Time [min]",
y = "Actual Delivery Time [min]"
) +
theme_minimal()
ggplot(test_data, aes(x = predicted_min, y = actual_min)) +
geom_point(alpha = 0.3) +
geom_segment(aes(xend = predicted_min, yend = predicted_min), color = "blue", alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Abweichungen der Vorhersagen", x = "Vorhergesagt", y = "TatsÃ¤chlich") +
theme_minimal()
ggplot(test_data, aes(x = predicted_min, y = actual_min)) +
geom_point(alpha = 0.3) +
geom_segment(aes(xend = predicted_min, yend = predicted_min), color = "blue", alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(
title = "Prediction Errors on Test Data",
x = "Predicted Delivery Time [min]",
y = "Actual Delivery Time [min]"
) +
theme_minimal()
rmse <- sqrt(mean((predicted_min - actual_min)^2))
r_squared <- 1 - sum((predicted_min - actual_min)^2) / sum((actual_min - mean(actual_min))^2)
rmse
r_squared
rmse <- sqrt(mean((predicted_min - actual_min)^2))
r_squared <- 1 - sum((predicted_min - actual_min)^2) / sum((actual_min - mean(actual_min))^2)
rmse
r_squared
ggplot(test_data, aes(x = predicted_min, y = actual_min)) +
geom_point(alpha = 0.3) +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(
title = "Predicted vs Actual Delivery Time",
x = "Predicted Delivery Time [min]",
y = "Actual Delivery Time [min]"
) +
theme_minimal()
ggplot(test_data, aes(x = predicted_min, y = actual_min)) +
geom_point(alpha = 0.3) +
geom_segment(aes(xend = predicted_min, yend = predicted_min), color = "blue", alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(
title = "Prediction Errors on Test Data",
x = "Predicted Delivery Time [min]",
y = "Actual Delivery Time [min]"
) +
theme_minimal()
ggplot(test_data, aes(x = predicted_min, y = actual_min)) +
geom_point(alpha = 0.3) +
geom_segment(aes(xend = predicted_min, yend = predicted_min), color = "blue", alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(
title = "Prediction Errors on Test Data",
x = "Predicted Delivery Time [min]",
y = "Actual Delivery Time [min]"
) +
theme_minimal()
# calculating rmse for only short deliveries (i.e. < 40min)
short_deliveries <- test_data[test_data$actual_min <= 40, ]
rmse_short <- sqrt(mean((short_deliveries$predicted_min - short_deliveries$actual_min)^2))
rmse_short
# calculating rmse for only short deliveries (i.e. < 40min)
results <- data.frame(predicted_min = predicted_min, actual_min = actual_min)
short_deliveries <- results[results$actual_min < 40, ]
rmse_short <- sqrt(mean((short_deliveries$predicted_min - short_deliveries$actual_min)^2, na.rm = TRUE))
# calculating rmse for only short deliveries (i.e. < 40min)
results <- data.frame(predicted_min = predicted_min, actual_min = actual_min)
short_deliveries <- results[results$actual_min < 40, ]
rmse_short <- sqrt(mean((short_deliveries$predicted_min - short_deliveries$actual_min)^2))
rmse_short
library(ggplot2)
library(dplyr)
library(caret)
d.food_time <- read.csv("C:/Users/Setup/OneDrive/02_Masterstudium/03_Module/02_Semester_2/03_ML1/git_group_work/Modelling-Food-Delivery-Time/data/cleaned_data.csv", header = TRUE)
str(d.food_time)
head(d.food_time)
summary(d.food_time)
colSums(is.na(d.food_time))
colnames(d.food_time)
View(d.food_time)
##Checking distribution of target variable
hist(d.food_time$delivery_time_min, main = "Distribution of delivery time [min]")
boxplot(d.food_time$delivery_time_min, main = "Boxplot of delivery time [min]")
summary(d.food_time$delivery_time_min)
#Log transforming target variable and investigating it's distribution
hist(log(d.food_time$delivery_time_min), main = "Log-transformed distribution of delivery time")
boxplot(log(d.food_time$delivery_time_min), main = "Boxplot of log-transformed delivery time [min]")
summary(log(d.food_time$delivery_time_min))
d.food_time <- d.food_time %>%
mutate(log_delivery_time = log(delivery_time_min))
numeric_vars <- d.food_time %>%
select(distance_km, courier_age_years, courier_rating_1_to_5,
temperature_celsius, humidity_percent, precipitation_mm, average_speed_kmph)
par(mfrow = c(3, 3))
for (var in names(numeric_vars)) {
hist(numeric_vars[[var]], main = var, xlab = var, col = "lightgray", breaks = 30)
}
par(mfrow = c(3, 3))
# Variable for target variable
target <- "log_delivery_time"
# Predictors, just numeric.
numeric_predictors <- c("distance_km", "courier_age_years", "courier_rating_1_to_5",
"temperature_celsius", "humidity_percent")
# Loop to plot all the scatterplot of numeric variables
for (var in numeric_predictors) {
plot(d.food_time[[var]], d.food_time[[target]],
main = paste(var, "vs", target),
xlab = var, ylab = target,
pch = 20, col = rgb(0, 0, 0, 0.3))
abline(lm(d.food_time[[target]] ~ d.food_time[[var]]),
col = "blue", lwd = 2)
}
cor(d.food_time[, c(numeric_predictors, target)])
par(mfrow = c(2, 2), mar = c(5, 5, 4, 2))
# Boxplot for order type
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time,
main = "Log Delivery Time by Order Type",
xlab = "Order Type", ylab = "log(Delivery Time)",
col = "lightblue", border = "darkblue", cex.axis = 0.8)
# Boxplot for vehicle type
boxplot(log_delivery_time ~ vehicle_type_factor, data = d.food_time,
main = "Log Delivery Time by Vehicle Type",
xlab = "Vehicle Type", ylab = "log(Delivery Time)",
col = "lightgreen", border = "darkblue", cex.axis = 0.8)
# boxplot for traffic level
boxplot(log_delivery_time ~ traffic_level_factor, data = d.food_time,
main = "Log Delivery Time by Traffic Level",
xlab = "Traffic Level", ylab = "log(Delivery Time)",
col = "orange", border = "darkblue", cex.axis = 0.8)
# boxplot for weather category
boxplot(log_delivery_time ~ weather_category, data = d.food_time,
main = "Log Delivery Time by Weather",
xlab = "Weather Category", ylab = "log(Delivery Time)",
col = "lightgray", border = "darkblue", cex.axis = 0.8)
# Checking relation between distance_km and vehicle_type_factor in a boxplot
boxplot(distance_km ~ vehicle_type_factor, data = d.food_time)
# Boxplot for order type
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time,
main = "Log Delivery Time by Order Type",
xlab = "Order Type", ylab = "log(Delivery Time)",
col = "lightblue", border = "darkblue", cex.axis = 0.8)
# Boxplot for vehicle type
boxplot(log_delivery_time ~ vehicle_type_factor, data = d.food_time,
main = "Log Delivery Time by Vehicle Type",
xlab = "Vehicle Type", ylab = "log(Delivery Time)",
col = "lightgreen", border = "darkblue", cex.axis = 0.8)
# boxplot for traffic level
boxplot(log_delivery_time ~ traffic_level_factor, data = d.food_time,
main = "Log Delivery Time by Traffic Level",
xlab = "Traffic Level", ylab = "log(Delivery Time)",
col = "orange", border = "darkblue", cex.axis = 0.8)
# boxplot for weather category
boxplot(log_delivery_time ~ weather_category, data = d.food_time,
main = "Log Delivery Time by Weather",
xlab = "Weather Category", ylab = "log(Delivery Time)",
col = "lightgray", border = "darkblue", cex.axis = 0.8)
par(mfrow = c(2, 2), mar = c(5, 5, 4, 2))
# Boxplot for order type
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time,
main = "Log Delivery Time by Order Type",
xlab = "Order Type", ylab = "log(Delivery Time)",
col = "lightblue", border = "darkblue", cex.axis = 0.8)
# Boxplot for vehicle type
boxplot(log_delivery_time ~ vehicle_type_factor, data = d.food_time,
main = "Log Delivery Time by Vehicle Type",
xlab = "Vehicle Type", ylab = "log(Delivery Time)",
col = "lightgreen", border = "darkblue", cex.axis = 0.8)
# boxplot for traffic level
boxplot(log_delivery_time ~ traffic_level_factor, data = d.food_time,
main = "Log Delivery Time by Traffic Level",
xlab = "Traffic Level", ylab = "log(Delivery Time)",
col = "orange", border = "darkblue", cex.axis = 0.8)
# boxplot for weather category
boxplot(log_delivery_time ~ weather_category, data = d.food_time,
main = "Log Delivery Time by Weather",
xlab = "Weather Category", ylab = "log(Delivery Time)",
col = "lightgray", border = "darkblue", cex.axis = 0.8)
# Using ggplot to create a scatterplot (delivery time ~ distance) with traffic level in different colors
ggplot(d.food_time, aes(x = distance_km, y = log_delivery_time, color = traffic_level_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Traffic Level",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Traffic Level"
) +
theme_minimal()
# Out of curiosity [Do not use for report]: same plot but not with log transformed delivery time
ggplot(d.food_time, aes(x = distance_km, y = delivery_time_min, color = traffic_level_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Traffic Level",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Traffic Level"
) +
theme_minimal()
# Using ggplot to create a scatterplot (delivery time ~ distance) with traffic level in different colors
ggplot(d.food_time, aes(x = distance_km, y = log_delivery_time, color = traffic_level_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Traffic Level",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Traffic Level"
) +
theme_minimal()
# Out of curiosity [Do not use for report]: same plot but not with log transformed delivery time
ggplot(d.food_time, aes(x = distance_km, y = delivery_time_min, color = traffic_level_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Traffic Level",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Traffic Level"
) +
theme_minimal()
# Using ggplot to create a scatterplot (delivery time ~ distance) with order type in different colors
ggplot(d.food_time, aes(x = distance_km, y = log_delivery_time, color = order_type_factor)) +
geom_point(alpha = 0.5) +
labs(
title = "Distance vs Log Delivery Time by Order Type",
x = "Distance (km)",
y = "Log Delivery Time",
color = "Order Type"
) +
theme_minimal()
# Boxplot for order type
boxplot(log_delivery_time ~ order_type_factor, data = d.food_time,
main = "Log Delivery Time by Order Type",
xlab = "Order Type", ylab = "log(Delivery Time)",
col = "lightblue", border = "darkblue", cex.axis = 0.8)
hist(d.food_time$traffic_level_factor)
set.seed(42)
train_indices <- createDataPartition(d.food_time$traffic_level_factor, p = 0.8, list = FALSE)
train_data <- d.food_time[train_indices, ]
test_data  <- d.food_time[-train_indices, ]
# Releveling factor traffic_level & set to meaningful sequence (increasing)
d.food_time$traffic_level_factor <- factor(
d.food_time$traffic_level_factor,
levels = c("very low", "low", "moderate", "high", "very high")
)
# Fitting linear model with two numeric and two categorial variables
lm.delivery1 <- lm(log_delivery_time ~ distance_km + courier_rating_1_to_5 + traffic_level_factor + order_type_factor, data = train_data)
# Investigating model coefficients
summary(lm.delivery1)
# Exponentiate coefficients from model
exp(lm.delivery1$coefficients)
# Confidence intervals for coefficients
confint(lm.delivery1)
# prepare data
df_plot <- data.frame(
fitted = fitted(lm.delivery1),
residuals = resid(lm.delivery1)
)
# Plot: residuals vs Fitted
ggplot(df_plot, aes(x = fitted, y = residuals)) +
geom_point(alpha = 0.3) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(title = "Residuals vs Fitted",
x = "Fitted Values",
y = "Residuals") +
theme_minimal()
qqnorm(resid(lm.delivery1))
qqline(resid(lm.delivery1), col = "red")
qqnorm(resid(lm.delivery1))
qqline(resid(lm.delivery1), col = "red")
set.seed(42)
train_indices <- createDataPartition(d.food_time$traffic_level_factor, p = 0.8, list = FALSE)
train_data <- d.food_time[train_indices, ]
test_data  <- d.food_time[-train_indices, ]
# Releveling factor traffic_level & set to meaningful sequence (increasing)
d.food_time$traffic_level_factor <- factor(
d.food_time$traffic_level_factor,
levels = c("very low", "low", "moderate", "high", "very high")
)
# Fitting linear model with two numeric and two categorial variables
lm.delivery1 <- lm(log_delivery_time ~ distance_km + courier_rating_1_to_5 + traffic_level_factor + order_type_factor, data = train_data)
# Investigating model coefficients
summary(lm.delivery1)
# Exponentiate coefficients from model
exp(lm.delivery1$coefficients)
# Confidence intervals for coefficients
confint(lm.delivery1)
# prepare data
df_plot <- data.frame(
fitted = fitted(lm.delivery1),
residuals = resid(lm.delivery1)
)
# Plot: residuals vs Fitted
ggplot(df_plot, aes(x = fitted, y = residuals)) +
geom_point(alpha = 0.3) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(title = "Residuals vs Fitted",
x = "Fitted Values",
y = "Residuals") +
theme_minimal()
# using drop1() on first linear model
drop1(lm.delivery1, test = "F")
lm.delivery2 <- update(lm.delivery1, . ~ . - courier_rating_1_to_5)
summary(lm.delivery2)
summary(lm.delivery1)
# Akaike Information Criterion
AIC(lm.delivery1)
AIC(lm.delivery2)
# Including interaction between distance_km and traffic_level_factor
lm.interaction <- lm(log_delivery_time ~ distance_km * traffic_level_factor + order_type_factor, data = train_data)
summary(lm.interaction)
summary(lm.delivery2)
# AIC to compare models
AIC(lm.delivery2)
AIC(lm.interaction)
# anova to compare models
anova(lm.delivery2, lm.interaction)
# Prediction, exponentation of prediction and actual delivery time from test_data
predicted_log <- predict(lm.interaction, newdata = test_data)
predicted_min <- exp(predicted_log)
actual_min <- test_data$delivery_time_min
ggplot(test_data, aes(x = predicted_min, y = actual_min)) +
geom_point(alpha = 0.3) +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(
title = "Predicted vs Actual Delivery Time",
x = "Predicted Delivery Time [min]",
y = "Actual Delivery Time [min]"
) +
theme_minimal()
ggplot(test_data, aes(x = predicted_min, y = actual_min)) +
geom_point(alpha = 0.3) +
geom_segment(aes(xend = predicted_min, yend = predicted_min), color = "blue", alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(
title = "Prediction Errors on Test Data",
x = "Predicted Delivery Time [min]",
y = "Actual Delivery Time [min]"
) +
theme_minimal()
# calculation root mean squared error and r_squared on test data
rmse <- sqrt(mean((predicted_min - actual_min)^2))
r_squared <- 1 - sum((predicted_min - actual_min)^2) / sum((actual_min - mean(actual_min))^2)
rmse
r_squared
# calculating rmse for only short deliveries (i.e. < 40min)
results <- data.frame(predicted_min = predicted_min, actual_min = actual_min)
short_deliveries <- results[results$actual_min < 40, ]
rmse_short <- sqrt(mean((short_deliveries$predicted_min - short_deliveries$actual_min)^2))
rmse_short
