library(dplyr)
library(ggplot2)
library(ggspatial)
library(terra)
library(sf)
library(maptiles)
library(gridExtra)
library(patchwork)
library(GGally)
library(caret)
library(broom)
library(knitr)
library(e1071)
# Load the raw data
df.food_time <- read.csv("../data/Food_Time_Data_Set.csv")
df.food_time <- df.food_time %>%
rename(
order_id = ID,
courier_id = Delivery_person_ID,
courier_age_years = Delivery_person_Age,
courier_rating_1_to_5 = Delivery_person_Ratings,
restaurant_latitude_deg = Restaurant_latitude,
restaurant_longitude_deg = Restaurant_longitude,
customer_latitude_deg = Delivery_location_latitude,
customer_longitude_deg = Delivery_location_longitude,
order_type = Type_of_order,
vehicle_type = Type_of_vehicle,
temperature_celsius = temperature,
humidity_percent = humidity,
precipitation_mm = precipitation,
weather_description = weather_description,
traffic_level = Traffic_Level,
distance_km = Distance..km.,
delivery_time_min = TARGET
)
# Relevel factor level in meaningful way
df_clean$traffic_level_factor <- factor(
df_clean$traffic_level_factor,
levels = c("very low", "low", "moderate", "high", "very high")
)
# Plot counts for categorical variables
p1 <- ggplot(df_clean, aes(x = order_type_factor, fill = order_type_factor)) +
geom_bar() +
labs(title = "Orders by Type", x = "Order Type", y = "Count") +
theme_minimal() + theme(legend.position = "none")
p1 <- ggplot(df_clean, aes(x = order_type_factor, fill = order_type_factor)) +
geom_bar() +
labs(title = "Orders by Type", x = "Order Type", y = "Count") +
theme_minimal() + theme(legend.position = "none")
# Plot counts for categorical variables
p1 <- ggplot(df_clean, aes(x = order_type_factor, fill = order_type_factor)) +
geom_bar() +
labs(title = "Orders by Type", x = "Order Type", y = "Count") +
theme_minimal() + theme(legend.position = "none")
# Relevel factor level in meaningful way
df_clean$traffic_level_factor <- factor(
df_clean$traffic_level_factor,
levels = c("very low", "low", "moderate", "high", "very high")
)
df_clean <- df.food_time.clean %>%
select(-X) %>%
mutate(
# Clean numeric values and convert to numeric
distance_km = as.numeric(na_if(gsub("[^0-9\\.]", "", distance_km), "")),
delivery_time_min = as.numeric(na_if(gsub("[^0-9\\.]", "", delivery_time_min), "")),
# Clean and convert categorical variables to factors
order_type_factor = factor(str_trim(order_type)),
vehicle_type_factor = factor(str_trim(vehicle_type)),
# Clean traffic level
traffic_level_cleaned = str_trim(tolower(traffic_level)),
traffic_level_factor = factor(traffic_level_cleaned),
# Clean weather description
weather_description_cleaned = str_trim(tolower(weather_description)),
weather_category = factor(case_when(
weather_description_cleaned %in% c("broken clouds", "clear sky", "few clouds", "overcast clouds", "scattered clouds") ~ "Clear",
weather_description_cleaned %in% c("fog", "haze", "smoke") ~ "Poor Visibility",
weather_description_cleaned %in% c("mist", "moderate rain", "light rain") ~ "Rainy",
TRUE ~ NA_character_
), levels = c("Clear", "Poor Visibility", "Rainy"), ordered = TRUE),
# Flag for long delivery time
long_delivery_flag = if_else(delivery_time_min >= 40, 1, 0),
# Calculate average speed in km/h
average_speed_kmph = as.integer(if_else(delivery_time_min > 0, distance_km * 60 / delivery_time_min, NA_real_))
) %>%
drop_na()
# Load required libraries
library(dplyr)
library(ggplot2)
library(ggspatial)
library(terra)
library(sf)
library(maptiles)
library(gridExtra)
library(patchwork)
library(GGally)
library(caret)
library(broom)
library(knitr)
library(e1071)
library(tidyr)
library(stringr)
df_clean <- df.food_time.clean %>%
select(-X) %>%
mutate(
# Clean numeric values and convert to numeric
distance_km = as.numeric(na_if(gsub("[^0-9\\.]", "", distance_km), "")),
delivery_time_min = as.numeric(na_if(gsub("[^0-9\\.]", "", delivery_time_min), "")),
# Clean and convert categorical variables to factors
order_type_factor = factor(str_trim(order_type)),
vehicle_type_factor = factor(str_trim(vehicle_type)),
# Clean traffic level
traffic_level_cleaned = str_trim(tolower(traffic_level)),
traffic_level_factor = factor(traffic_level_cleaned),
# Clean weather description
weather_description_cleaned = str_trim(tolower(weather_description)),
weather_category = factor(case_when(
weather_description_cleaned %in% c("broken clouds", "clear sky", "few clouds", "overcast clouds", "scattered clouds") ~ "Clear",
weather_description_cleaned %in% c("fog", "haze", "smoke") ~ "Poor Visibility",
weather_description_cleaned %in% c("mist", "moderate rain", "light rain") ~ "Rainy",
TRUE ~ NA_character_
), levels = c("Clear", "Poor Visibility", "Rainy"), ordered = TRUE),
# Flag for long delivery time
long_delivery_flag = if_else(delivery_time_min >= 40, 1, 0),
# Calculate average speed in km/h
average_speed_kmph = as.integer(if_else(delivery_time_min > 0, distance_km * 60 / delivery_time_min, NA_real_))
) %>%
drop_na()
# Load the raw data
df.food_time <- read.csv("../data/Food_Time_Data_Set.csv")
# Load the raw data
df.food_time <- read.csv("../data/Food_Time_Data_Set.csv")
df.food_time <- df.food_time %>%
rename(
order_id = ID,
courier_id = Delivery_person_ID,
courier_age_years = Delivery_person_Age,
courier_rating_1_to_5 = Delivery_person_Ratings,
restaurant_latitude_deg = Restaurant_latitude,
restaurant_longitude_deg = Restaurant_longitude,
customer_latitude_deg = Delivery_location_latitude,
customer_longitude_deg = Delivery_location_longitude,
order_type = Type_of_order,
vehicle_type = Type_of_vehicle,
temperature_celsius = temperature,
humidity_percent = humidity,
precipitation_mm = precipitation,
weather_description = weather_description,
traffic_level = Traffic_Level,
distance_km = Distance..km.,
delivery_time_min = TARGET
)
df_clean <- df.food_time.clean %>%
select(-X) %>%
mutate(
# Clean numeric values and convert to numeric
distance_km = as.numeric(na_if(gsub("[^0-9\\.]", "", distance_km), "")),
delivery_time_min = as.numeric(na_if(gsub("[^0-9\\.]", "", delivery_time_min), "")),
# Clean and convert categorical variables to factors
order_type_factor = factor(str_trim(order_type)),
vehicle_type_factor = factor(str_trim(vehicle_type)),
# Clean traffic level
traffic_level_cleaned = str_trim(tolower(traffic_level)),
traffic_level_factor = factor(traffic_level_cleaned),
# Clean weather description
weather_description_cleaned = str_trim(tolower(weather_description)),
weather_category = factor(case_when(
weather_description_cleaned %in% c("broken clouds", "clear sky", "few clouds", "overcast clouds", "scattered clouds") ~ "Clear",
weather_description_cleaned %in% c("fog", "haze", "smoke") ~ "Poor Visibility",
weather_description_cleaned %in% c("mist", "moderate rain", "light rain") ~ "Rainy",
TRUE ~ NA_character_
), levels = c("Clear", "Poor Visibility", "Rainy"), ordered = TRUE),
# Flag for long delivery time
long_delivery_flag = if_else(delivery_time_min >= 40, 1, 0),
# Calculate average speed in km/h
average_speed_kmph = as.integer(if_else(delivery_time_min > 0, distance_km * 60 / delivery_time_min, NA_real_))
) %>%
drop_na()
# Clean the data by filtering for geographic coordinates
df.food_time.clean <- df.food_time %>%
filter(
customer_longitude_deg >= 60,
restaurant_longitude_deg >= 60,
customer_latitude_deg >= 0,
restaurant_latitude_deg >= 0
)
df_clean <- df.food_time.clean %>%
select(-X) %>%
mutate(
# Clean numeric values and convert to numeric
distance_km = as.numeric(na_if(gsub("[^0-9\\.]", "", distance_km), "")),
delivery_time_min = as.numeric(na_if(gsub("[^0-9\\.]", "", delivery_time_min), "")),
# Clean and convert categorical variables to factors
order_type_factor = factor(str_trim(order_type)),
vehicle_type_factor = factor(str_trim(vehicle_type)),
# Clean traffic level
traffic_level_cleaned = str_trim(tolower(traffic_level)),
traffic_level_factor = factor(traffic_level_cleaned),
# Clean weather description
weather_description_cleaned = str_trim(tolower(weather_description)),
weather_category = factor(case_when(
weather_description_cleaned %in% c("broken clouds", "clear sky", "few clouds", "overcast clouds", "scattered clouds") ~ "Clear",
weather_description_cleaned %in% c("fog", "haze", "smoke") ~ "Poor Visibility",
weather_description_cleaned %in% c("mist", "moderate rain", "light rain") ~ "Rainy",
TRUE ~ NA_character_
), levels = c("Clear", "Poor Visibility", "Rainy"), ordered = TRUE),
# Flag for long delivery time
long_delivery_flag = if_else(delivery_time_min >= 40, 1, 0),
# Calculate average speed in km/h
average_speed_kmph = as.integer(if_else(delivery_time_min > 0, distance_km * 60 / delivery_time_min, NA_real_))
) %>%
drop_na()
# Create histogram of target variable "Delivery Time [min]"
p1 <- ggplot(df_clean, aes(x = delivery_time_min)) +
geom_histogram(binwidth = 5, fill = "steelblue", color = "white") +
labs(title = "Distribution of Delivery Time [min]", x = "Delivery Time (min)", y = "Count") +
theme_minimal()
# Boxplot of target variable
p2 <- ggplot(df_clean, aes(y = delivery_time_min)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Boxplot of Delivery Time", y = "Delivery Time (min)") +
theme_minimal()
# Display next to each other
p1 + p2
kable(
summary(df_clean$delivery_time_min),
caption = "Summary of Delivery Time [min]"
)
summary(df_clean$delivery_time_min)
as.data.frame(summary(df_clean$delivery_time_min))
